<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WgCg Blog</title>
  
  <subtitle>Keep Learning and Never Give Up</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-11T08:07:07.188Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cong.Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript笔记</title>
    <link href="http://yoursite.com/2019/03/09/TypeScript%E7%AC%94%E8%AE%B0.html"/>
    <id>http://yoursite.com/2019/03/09/TypeScript笔记.html</id>
    <published>2019-03-09T07:43:06.000Z</published>
    <updated>2019-03-11T08:07:07.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript入门教程"><a href="#TypeScript入门教程" class="headerlink" title="TypeScript入门教程"></a>TypeScript入门教程</h1><ol><li>null和undefined是所有类型的子类型，也就说null和undefined类型的变量可以赋值给任意类型的变量，而void类型的变量却不行。</li><li>在any类型的变量上访问任何属性或者调用任何方法都是允许的，声明一个变量为any后，对它的任何操作，返回的内容的类型都是任意值。</li><li>变量如果在声明的时候，未指定其类型，那么它会被识别为any类型。</li><li><p>当TypeScript不确定一个联合类型的变量是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性和方法。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> something.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Property 'length' does not exist on type 'number'.</span></span><br></pre></td></tr></table></figure></li><li><p>赋值的时候，变量的形状必须与接口的形状保持一致。</p></li><li><p>接口一旦定义了索引签名，那么确定属性和可选属性的类型都必须是它的类型的子集。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string index type 'string'.</span></span><br></pre></td></tr></table></figure></li><li><p>只读属性的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    readonly id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.id = <span class="number">89757</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(8,5): error TS2322: Type '&#123; name: string; gender: string; &#125;' is not assignable to type 'Person'.</span></span><br><span class="line"><span class="comment">//   Property 'id' is missing in type '&#123; name: string; gender: string; &#125;'.</span></span><br><span class="line"><span class="comment">// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span></span><br></pre></td></tr></table></figure></li><li><p>调用函数时，输入多余的（或者少于要求的）参数，是不被允许的，可以使用可选参数。</p></li><li>可选参数后面不允许再出现必须参数了。</li><li>TypeScript会将添加了默认值的参数识别为可选参数，此时就不受「可选参数必须接在必需参数后面」的限制了。</li><li>当发生函数重载的时候，TypeScript会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</li><li><p>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBoolean</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="built_in">boolean</span>&gt;something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,10): error TS2352: Type 'string | number' cannot be converted to type 'boolean'.</span></span><br><span class="line"><span class="comment">// Type 'number' is not comparable to type 'boolean'.</span></span><br></pre></td></tr></table></figure></li><li><p>declare var a 与 var a的区别在于declare并没有对变量a进行声明，在编译结果中会被删除，而var a声明了这个变量。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">decalre <span class="keyword">var</span> a <span class="comment">// 说明在某处已经声明过改变量</span></span><br><span class="line">a = <span class="number">1</span> <span class="comment">// 对变量重新进行赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述代码编译结果</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述代码编译结果</span></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line">a = <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>只有function、class和interface可以直接默认导出，其它的变量需要先定义出来，再默认导出</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line"><span class="comment">// ERROR: Expression expected.</span></span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当为元组类型的变量添加越界的元素时，它的类型会被限制为元组每个类型的联合类型。</p></li><li><p>枚举项有两种类型：常数项和计算所得项。如果紧接在计算所得项后面的是未手动赋值的项，那么它就会因为无法获得初始值而报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="string">"red"</span>.length, Green, Blue&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(1,33): error TS1061: Enum member must have initializer.</span></span><br><span class="line"><span class="comment">// index.ts(1,40): error TS1061: Enum member must have initializer.</span></span><br></pre></td></tr></table></figure></li><li><p>常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述代码编译为：</span></span><br><span class="line"><span class="keyword">var</span> directions = [<span class="number">0</span> <span class="comment">/* Up */</span>, <span class="number">1</span> <span class="comment">/* Down */</span>, <span class="number">2</span> <span class="comment">/* Left */</span>, <span class="number">3</span> <span class="comment">/* Right */</span>];</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TypeScript入门教程&quot;&gt;&lt;a href=&quot;#TypeScript入门教程&quot; class=&quot;headerlink&quot; title=&quot;TypeScript入门教程&quot;&gt;&lt;/a&gt;TypeScript入门教程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;null和undefined是所
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TypeScript/"/>
    
    
      <category term="typescript" scheme="http://yoursite.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>git结合beyond-compare</title>
    <link href="http://yoursite.com/2019/03/08/git%E7%BB%93%E5%90%88beyond-compare.html"/>
    <id>http://yoursite.com/2019/03/08/git结合beyond-compare.html</id>
    <published>2019-03-08T07:10:44.000Z</published>
    <updated>2019-03-08T07:14:00.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="beyond-compare-无限试用"><a href="#beyond-compare-无限试用" class="headerlink" title="beyond compare 无限试用"></a>beyond compare 无限试用</h1><h2 id="for-mac"><a href="#for-mac" class="headerlink" title="for mac"></a>for mac</h2><ol><li>应用程序 -&gt; beyond cmpare右击显示包内容 -&gt; contents -&gt; macos</li><li>在当前目录下新建文件BCompare.sh，把原来的BCompare重命名为BCompare.real</li><li><p>编辑BCompare.sh，输入以下代码:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">rm <span class="string">"/Users/<span class="variable">$(whoami)</span>/Library/Application Support/Beyond Compare/registry.dat"</span></span><br><span class="line"><span class="string">"`dirname "</span><span class="variable">$0</span><span class="string">"`"</span>/BCompare.real <span class="variable">$@</span></span><br></pre></td></tr></table></figure></li><li><p>右击BCompare.sh -&gt; 显示简介 -&gt; 删除文件名后缀.sh</p></li></ol><h1 id="gitconfig配置"><a href="#gitconfig配置" class="headerlink" title=".gitconfig配置"></a>.gitconfig配置</h1><p>.gitconfig位于user下, shift + comand + . 显示隐藏文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">    dift = &quot;difftool --dir-diff --no-symlinks&quot;</span><br><span class="line">[diff]</span><br><span class="line">    tool = bcomp</span><br><span class="line">[difftool]</span><br><span class="line">    prompt = false</span><br><span class="line">[difftool &quot;bcomp&quot;]</span><br><span class="line">    trustExitCode = true</span><br><span class="line">    cmd = &quot;/usr/local/bin/bcomp&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;</span><br><span class="line">[merge]</span><br><span class="line">    tool = bcomp</span><br><span class="line">[mergetool]</span><br><span class="line">    prompt = false</span><br><span class="line">[mergetool &quot;bcomp&quot;]</span><br><span class="line">    trustExitCode = true</span><br><span class="line">    cmd = &quot;/usr/local/bin/bcomp&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot; \&quot;$BASE\&quot; \&quot;$MERGED\&quot;</span><br></pre></td></tr></table></figure><ol><li>git dift origin/dev：当前分支与远程dev分支进行比较</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;beyond-compare-无限试用&quot;&gt;&lt;a href=&quot;#beyond-compare-无限试用&quot; class=&quot;headerlink&quot; title=&quot;beyond compare 无限试用&quot;&gt;&lt;/a&gt;beyond compare 无限试用&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="其它技术" scheme="http://yoursite.com/categories/%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF/"/>
    
      <category term="git" scheme="http://yoursite.com/categories/%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="beyond compare" scheme="http://yoursite.com/tags/beyond-compare/"/>
    
  </entry>
  
  <entry>
    <title>Jekins构建结果与本地构建结果Vue版本不同</title>
    <link href="http://yoursite.com/2019/03/08/Jekins%E6%9E%84%E5%BB%BA%E7%BB%93%E6%9E%9C%E4%B8%8E%E6%9C%AC%E5%9C%B0%E6%9E%84%E5%BB%BA%E7%BB%93%E6%9E%9CVue%E7%89%88%E6%9C%AC%E4%B8%8D%E5%90%8C.html"/>
    <id>http://yoursite.com/2019/03/08/Jekins构建结果与本地构建结果Vue版本不同.html</id>
    <published>2019-03-08T07:00:30.000Z</published>
    <updated>2019-03-08T07:09:09.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目迁移到jenkins，通过jenkins进行构建，部署后发现页面报错，但是本地构建出来代码部署后是正常的，报错如下：</p><p><img width="800" src="/assets/webpack/problems/9.png"></p><h1 id="问题排查过程"><a href="#问题排查过程" class="headerlink" title="问题排查过程"></a>问题排查过程</h1><ol><li><p>注释webpack插件UglifyJsPlugin插件，不进行代码压缩</p><p> <img width="500" src="/assets/webpack/problems/13.png"></p></li><li><p>对比本地代码与jenkins构建出来的代码，构建输出目录结构如下：<br> <img width="500" src="/assets/webpack/problems/14.png"></p></li><li><p>对比结果</p><ul><li>app.js中只存在一些变量名和Path的不一致，不会产生错误</li><li>manifest.js完全一致</li><li>vendor.js中Vue的版本不一致，jenkins构建出来的Vue版本是2.5.20，本地构建出来的Vue版本是2.5.21，推测是由此产生的错误</li></ul></li><li>用本地构建出的vendor.js替换jenkins构建出的vendor.js，部署到ftp上，发现问题解决了，确认推测是正确的</li><li><p>对比两个Vue版本代码的不同，发现是以下代码影响的：</p><p> <img width="800" src="/assets/webpack/problems/10.png"></p><p> <img width="500" src="/assets/webpack/problems/8.png"></p><p> <img width="500" src="/assets/webpack/problems/12.png"></p><p> 分析：rendList是v-for的实现方法，在Vue2.5.20中，当入参val属于类型: Array, String, Number, Object（非null）时初始化变量ret为数组并进行相应的处理，然后判断ret变量不为undefined和null时，给ret变量添加属性_isVList为true，然后将ret变量返回，ret的类型可能为undefined, Array，当返回undefined时，对undefined进行一些数组的操作就会发生错误，而控制台所报的错误就是因为取了undefined.length导致的，在Vue2.5.21版本修复了这个Bug，如果ret变量为undefined或null时，初始化ret为[]，这样确保rendList的返回值类型始终为Array</p></li></ol><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>由上可知，产生改问题的原因如下：</p><ul><li>直接原因： Vue2.5.20版本中存在代码漏洞</li><li>根本原因：jenkins服务器安装的Vue版本不正确，而为什么jenkins服务器安装的vue版本和本地安装的不一致，需要进一步排查，已经排除是node版本导致的原因</li></ul><p>因此，只要把package.json中vue依赖的版本号固定为2.5.21（注意：vue-template-compiler版本需要跟vue版本保持一致），问题就可以解决了，如下图：</p><p><img width="500" src="/assets/webpack/problems/15.png"></p><p><img width="500" src="/assets/webpack/problems/11.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;项目迁移到jenkins，通过jenkins进行构建，部署后发现页面报错，但是本地构建出来代码部署后是正常的，报错如下：&lt;/p&gt;
&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="打包工具" scheme="http://yoursite.com/categories/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Webpack" scheme="http://yoursite.com/categories/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/Webpack/"/>
    
      <category term="问题积累" scheme="http://yoursite.com/categories/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/Webpack/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>动态加载模块</title>
    <link href="http://yoursite.com/2019/03/08/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97.html"/>
    <id>http://yoursite.com/2019/03/08/动态加载模块.html</id>
    <published>2019-03-08T06:59:10.000Z</published>
    <updated>2019-03-08T07:08:18.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目本地开发通过mockjs进行数据模拟，它是通过重写XMLHttpRequest对象来拦截请求，从而达到纯前端mock，在webpack入口文件main.js中通过require引入mock文件，以下是mock文件和main.js的代码：</p><p>mock file:</p><p><img width="500" src="/assets/webpack/problems/2.png"></p><p>main.js:</p><p><img width="500" src="/assets/webpack/problems/7.png"></p><h2 id="Bug描述"><a href="#Bug描述" class="headerlink" title="Bug描述"></a>Bug描述</h2><p>上线后，发现在部分android手机和少数ios手机上无法加载出页面</p><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><ol><li>通过抓包排除接口&amp;数据问题</li><li>页面注入vConsole发现控制台输出脚本错误，无法识别const关键字</li><li><p>在构建出的js中定位const关键字，如下图：</p><p> <img width="500" src="/assets/webpack/problems/3.png"></p></li><li><p>可以得出问题表面原因是因为某些机型浏览器版本较低，无法识别ES6语法</p></li></ol><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>通过查看构建后的js与分析发现了三个问题：</p><ol><li>const语句是写在mock文件中，明明在main.js中根据环境去require mock文件了，为何mock文件还被打包进了页面的js中？</li><li>为何该const语法没有经过babel转译成ES5语法？</li><li>为何打包出的js没有进行压缩？</li></ol><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>const语句是写在mock文件中，明明在main.js中根据环境去require mock文件了，为何mock文件还被打包进了页面的js中？</p><p>webapck构建过程：webpack在构建的时候，会从所有入口文件开始递归查找代码中的require语法和import语法，并生成一个依赖图，这个依赖图包含着应用程序所需的每个模块，然后将所有这些模块打包为少量的bundle，而动态require模块webpack也是能够支持的，但会导致所有可能用到的模块都包含在bundle中<a href="https://www.webpackjs.com/guides/dependency-management/" target="_blank" rel="noopener">（详见）</a>，如果代码中依赖条件表达式动态require模块，类似上面的main.js那样，又不想把不需要的模块打包到bundle中，需要遵循以下要求：</p><ol><li>条件表达式中不允许出现变量</li><li>条件表达式不允许执行函数调用</li><li><p>只能进行一些常量的运算，如下：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js会被打包进bundle</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> + <span class="number">1</span> === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./module.js'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js会被打包进bundle</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./module.js'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js不会被打包进bundle</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./module.js'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js不会被打包进bundle</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> !== <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./module.js'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>webapck集成的DefinePlugin插件允许创建一个在编译时可以配置的全局常量<a href="https://www.webpackjs.com/plugins/define-plugin/" target="_blank" rel="noopener">（详见）</a></p></li></ol><p>问题1的原因正是因为违背了上述原则2，调用了字符串的match函数，而我们在webpack配置使用DefinePlugin插件，创建了一个全局常量process.env，从而规避了原则1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">if</span> (!process.env.NODE_ENV.match(<span class="regexp">/production|test/</span>)) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'../mock/index'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack配置</span></span><br><span class="line">&#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>: env</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们可以把main.js文件中的代码改成以下内容，达到非开发环境不把mock文件打包到bundle中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../mock/index'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>为何该const语法没有经过babel转译成ES5语法？</p><p>原因是在webpack的配置中，配置了只对src，test目录下的文件执行babel转译<a href="https://www.webpackjs.com/loaders/babel-loader/" target="_blank" rel="noopener">（详见）</a>，而mock文件不在这些目录下，所以没有进行转译</p><p><img width="500" src="/assets/webpack/problems/5.png"></p><h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><p>为何打包出的js没有进行压缩？</p><p>我们对项目进行构建，UglifyJsWebpackPlugin插件会报出如下错误：</p><p><img width="500" src="/assets/webpack/problems/6.png"></p><p>错误问题指向的是打包后的const语法，原因是因为<a href="https://www.webpackjs.com/plugins/uglifyjs-webpack-plugin/" target="_blank" rel="noopener">UglifyJsWebpackPlugin</a>不支持ES6语法，所以在<a href="https://www.webpackjs.com/guides/tree-shaking/" target="_blank" rel="noopener">treeshaking</a>的时候，遇到const语法，就发生错误了，终止了插件的执行，从而也无法执行后续的压缩步骤，但这并不影响其它插件的功能，webpack也无法感知到这个插件在执行过程中出现了错误，所以构建结果仍然是成功的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>运用条件表达式动态加载模块，除非条件表达式中不出现变量、函数调用，只进行一些常量的运算，那么条件为false的时候该模块是不会打包进bundle中的，否则无论条件为false还是true，始终会把该模块打包进bundle，只不过在条件为false的情况下不执行代码罢了</li><li>可以运用DefinePlugin添加运行时的全局常量</li><li>可以通过配置babel-loader的include选项对指定文件夹下的文件进行转译</li><li>UglifyJsWebpackPlugin不支持ES6语法</li><li>webpack无法感知插件运行过程中出现的错误，需要构建完成对构建的结果进行check，例如通过eslint对dist文件进行检查，是否有非ES5的代码</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;项目本地开发通过mockjs进行数据模拟，它是通过重写XMLHttpRequest对象来拦截请求，从而达到纯前端mock，在webpack入
      
    
    </summary>
    
      <category term="打包工具" scheme="http://yoursite.com/categories/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Webpack" scheme="http://yoursite.com/categories/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/Webpack/"/>
    
      <category term="问题积累" scheme="http://yoursite.com/categories/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/Webpack/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>滚动穿透问题</title>
    <link href="http://yoursite.com/2019/03/08/%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98.html"/>
    <id>http://yoursite.com/2019/03/08/滚动穿透问题.html</id>
    <published>2019-03-08T06:52:10.000Z</published>
    <updated>2019-03-08T06:53:31.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>当页面中有弹层时，禁止body的滚动</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>给body或html增加overflow: hidden<ul><li>pc端：可行</li><li>ios：不可行，仍然会滚动穿透，打开弹层时页面不会滚到顶部，除非body或html高度为屏幕高度</li><li>android：不可行，仍然会滚动穿透，打开弹层时页面不会滚到顶部，除非body或html高度为屏幕高度</li></ul></li><li>mask增加touchmove.prevent，滚动元素增加prevent.stop<ul><li>pc端：不可行，仍然会滚动穿透</li><li>ios：不可行，仍然会滚动穿透</li><li>android: 不可行，仍然会滚动穿透</li></ul></li><li><p>给body增加fixed，打开弹层时记录滚动条位置，弹层消失时滚动到记录位置</p><ul><li>pc端：可行</li><li>ios：当你从滚动容器滑动到容器之外时，或从底部下拉起控制中心，会导致容器进入短暂的无法滚动状态，等待一段时间后自动恢复，推测是ios的页面回弹效果影响的</li><li><p>android: 可行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.modal-open</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ModalHelper = (<span class="function"><span class="keyword">function</span> (<span class="params">bodyCls</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> scrollTop</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 弹出之后记录保存滚动位置，并且给body添加.modal-open</span></span><br><span class="line">        afterOpen: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            scrollTop = <span class="built_in">document</span>.scrollingElement.scrollTop</span><br><span class="line">            <span class="built_in">document</span>.body.classList.add(bodyCls)</span><br><span class="line">            <span class="built_in">document</span>.body.style.top = -scrollTop + <span class="string">'px'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 关闭时将.modal-open移除并还原之前保存滚动位置</span></span><br><span class="line">        beforeClose: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.body.classList.remove(bodyCls)</span><br><span class="line">            <span class="built_in">document</span>.scrollingElement.scrollTop = scrollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(<span class="string">'modal-open'</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>监听滚动容器的touchmove事件，当检测到已经处于最底部，却还意图往下滚动时，阻止默认事件（处于最顶部时同理）</p><ul><li>pc端：不支持touch事件</li><li>ios：可行，解决了页面反弹问题</li><li><p>android: 不可行，阻止默认事件没生效，仍会滚动穿透</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录开始滑动的坐标，用于判断滑动方向</span></span><br><span class="line"><span class="keyword">let</span> startY = <span class="number">0</span></span><br><span class="line"><span class="comment">// 记录滑动状态：0：未开始，1：已开始，2：滑动中</span></span><br><span class="line"><span class="keyword">let</span> scrollStatus = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下所有事件均绑定在滚动容器元素上</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">touchstartHandler</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    status = <span class="number">1</span></span><br><span class="line">    startY = e.targetTouches[<span class="number">0</span>].pageY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">touchmoveHandler</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status !== <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    status = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> t = e.currentTarget</span><br><span class="line">    <span class="keyword">let</span> py = e.targetTouches[<span class="number">0</span>].pageY</span><br><span class="line">    <span class="comment">// 内容可视高度</span></span><br><span class="line">    <span class="keyword">let</span> ch = t.clientHeight</span><br><span class="line">    <span class="comment">// 内容滚动高度</span></span><br><span class="line">    <span class="keyword">let</span> sh = t.scrollHeight</span><br><span class="line">    <span class="comment">// 当前滚动高度</span></span><br><span class="line">    <span class="keyword">let</span> st = t.scrollTop</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已经到头部尽头了还要向上滑动，阻止它</span></span><br><span class="line">    <span class="keyword">if</span> (st === <span class="number">0</span> &amp;&amp; startY &lt; py) &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已经到低部尽头了还要向下滑动，阻止它</span></span><br><span class="line">    <span class="keyword">if</span> ((st === sh - ch) &amp;&amp; startY &gt; py) &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">touchendHandler</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    status = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>不用自带滚动条，使用transform+overflow:hidden，监听touchmove事件自实现滚动效果</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>针对网页需要适配的端的不同，可采用不同的解决方案：</p><ol><li>PC端： 上述1、3</li><li>移动端：由上可见，单独的任何一种方法都无法完美适配android和ios，因此需要合并上述方法3、4以达到完美适配（Tip：在测试过程中，发现上述方法3在ios下的某些app中弹出弹层时页面会闪动，且页面弹层会消失，拖动页面才出现，如果要适配的app出现此类问题，最好区分android和ios环境分别采用上述3、4的方法，或者采用上述1、4合并（但是要把body或html的高度设置为屏幕的高度））</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h1&gt;&lt;p&gt;当页面中有弹层时，禁止body的滚动&lt;/p&gt;
&lt;h1 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="移动端开发" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="问题积累" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="滚动穿透" scheme="http://yoursite.com/tags/%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>input之type=number</title>
    <link href="http://yoursite.com/2019/03/08/input%E4%B9%8Btype-number.html"/>
    <id>http://yoursite.com/2019/03/08/input之type-number.html</id>
    <published>2019-03-08T06:51:56.000Z</published>
    <updated>2019-03-08T06:55:59.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h1><p>页面中存在输入框，点击输入框需要弹出数字键盘，且只能输入合法数字</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>自己开发一个键盘组件</li><li>input type=”number”</li></ol><h1 id="input-type-”number”存在的问题（只调查了部分机型，不一定完全准确）"><a href="#input-type-”number”存在的问题（只调查了部分机型，不一定完全准确）" class="headerlink" title="input type=”number”存在的问题（只调查了部分机型，不一定完全准确）"></a>input type=”number”存在的问题（只调查了部分机型，不一定完全准确）</h1><table><thead><tr><th>机型</th><th>键盘类型</th><th>表现</th><th>输入限制</th></tr></thead><tbody><tr><td>ios</td><td>自带键盘</td><td>调起带数字的特殊符号键盘，可以切换成英文键盘</td><td>可以输入任何字符，输入的不是合法的数字，则取到的value为空</td></tr><tr><td>ios</td><td>非自带键盘</td><td>调起数字键盘，可以切换成英文键盘</td><td>可以输入任何字符，输入的不是合法的数字，则取到的value为空</td></tr><tr><td>android</td><td>自带键盘</td><td>调起纯数字键盘，可以切换成英文键盘</td><td>可以输入数字，-、小数点，输入的不是合法的数字时，取到的value为空</td></tr><tr><td>android</td><td>非自带键盘</td><td>调起纯数字键盘，可以切换成英文键盘</td><td>可以输入数字，-、小数点和e，输入的不是合法的数字或带有e时，取到的value为空</td></tr></tbody></table><p>由上表可知，尽管input设置了type=”number”，但是在不同的机型与输入法下，所弹出的键盘和能输入的字符是不同的，并不能保证用户输入的是合法的数字，所以我们要对用户的输入进行限制。通过监听input事件，在用户进行输入后，进行正则校验替换非法字符，但是设置了type=”number”后，如果用户输入的不是合法的数字，取到的value为空，根本无法进行合法性校验与替换操作，在Android下还好，它已经帮我们限制了英文、符号等非法字符的输入，用户的输入得到了一定的保证，我们可以在input的blur事件中进行最终的合法性校验，并给予用户一定的提示。但是在ios下，用户可以输入任意的字符，也就是说用户输入非法的字符的可能性提高了很多，若同样在blur事件中进行校验与替换操作，给用户带来的体验过差，所以在ios下使用type=”number”并不可行</p><h1 id="那么在ios下是否有其它调起纯数字键盘的方法"><a href="#那么在ios下是否有其它调起纯数字键盘的方法" class="headerlink" title="那么在ios下是否有其它调起纯数字键盘的方法"></a>那么在ios下是否有其它调起纯数字键盘的方法</h1><p>答案是肯定的，以下两种方法可以调起纯数字键盘，但是调起来的数字键盘是不带小数点的，如果需要输入小数的话，这种方法是不可行的</p><ol><li>type=”tel”</li><li>pattern=”[0-9]*”</li><li>如果是webview，调用native的事件貌似可以，但需要native人员的支持</li></ol><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>综上所诉，type设置为number的方法是不可行的，无法实现我们对用户的输入进行实时的控制，但是把type设置为text，每次调起的都是英文键盘，用户还得切换一下键盘，才能愉快的进行输入，这个体验实在是太糟糕了，如果你的页面只有一个输入框，用户或许还能勉为其难的接受，但是如果存在多个，每次用户进行输入都得切换以下，可能砸手机的心态都有了😡，可见，把type设置为text的方法更加不可行</p><h1 id="回到我们的需求"><a href="#回到我们的需求" class="headerlink" title="回到我们的需求"></a>回到我们的需求</h1><ol><li>弹出数字键盘</li><li>限制用户输入</li></ol><p>首先要满足弹出数字键盘，就必须设置type=”number”，但是设置了type=”number”之后，该怎么限制用户的输入呢？把type设回text就行了，于是有了以下处理方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input type=<span class="string">"number"</span> :model=<span class="string">"price"</span> @focus=<span class="string">"focusHandler($event)"</span> @blur=<span class="string">"blurHandler($event)"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        watch: &#123;</span></span><br><span class="line"><span class="regexp">            price: function () &#123;</span></span><br><span class="line"><span class="regexp">                const newPrice = /</span><span class="regexp">/ 正则替换操作</span></span><br><span class="line"><span class="regexp">                return newPrice</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods: &#123;</span></span><br><span class="line"><span class="regexp">            blurHandler (e) &#123;</span></span><br><span class="line"><span class="regexp">                e.target.type = 'number'</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            focusHandler (e) &#123;</span></span><br><span class="line"><span class="regexp">                setTimeOut(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                    e.target.type = 'text'</span></span><br><span class="line"><span class="regexp">                &#125;, 100)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>在输入框获取焦点，弹起了数字键盘后，再把input的type设回text，这样当用户输入的是非数字字符时，也能获取到正常的value值了，然后进行合法性校验和替换，在失去焦点的时候，再把type设回number，以防下次点击的时候弹出非数字键盘，经过测试这种实现方法在ios下操作正常，但是在android下根本无法弹出键盘，于是有了下面的解决方案</p><h1 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"number"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo--input"</span></span><br><span class="line">        v-model=<span class="string">"realValue"</span> </span><br><span class="line">   @focus=<span class="string">"inputFocusHandler($event)"</span></span><br><span class="line">        @blur=<span class="string">"inputBlurHandler($event)"</span></span><br><span class="line">        @input=<span class="string">"inputHandler"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"DemoInput"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">   &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            realValue: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        realValue: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> realValue = newValue.replace(<span class="regexp">/[^0-9.]|(^\.)/g</span>, <span class="string">""</span>)</span><br><span class="line">            <span class="keyword">if</span> (realValue.charAt(realValue.length - <span class="number">1</span>) === <span class="string">"."</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> tempValue = realValue.slice(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">this</span>.realValue = <span class="regexp">/\./g</span>.test(tempValue) ? tempValue : realValue</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.realValue = realValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        validateValue () &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; realValue &#125; = <span class="keyword">this</span></span><br><span class="line">            <span class="comment">// 校验输入的是否是数字</span></span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                realValue !== <span class="string">""</span> &amp;&amp;</span><br><span class="line">                !<span class="regexp">/^[0-9]+(\.[0-9]+)?$/</span>.test(realValue)</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="keyword">this</span>.realValue = <span class="string">""</span></span><br><span class="line">                alet(<span class="string">'请输入正确的数字！'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 去除数字前面多余的0</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="regexp">/\./g</span>).test(realValue)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.realValue = realValue.replace(<span class="regexp">/^0+\./</span>, <span class="string">"0."</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.realValue = realValue.replace(<span class="regexp">/^0+/</span>, <span class="string">""</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        inputBlurHandler(e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.APP_TYPE === <span class="string">"ios"</span>) &#123;</span><br><span class="line">                e.target.type = <span class="string">"number"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.validateValue()</span><br><span class="line">        &#125;,</span><br><span class="line">        inputHandler(e) &#123;</span><br><span class="line">        <span class="comment">// 长度输入限制</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.realValue.length &gt; <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.realValue = <span class="keyword">this</span>.realValue.slice(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        inputFocusHandler(e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.APP_TYPE === <span class="string">"ios"</span>) &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    e.target.type = <span class="string">"text"</span></span><br><span class="line">                &#125;, <span class="number">100</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><ol><li>移动端自定义指令v-focus仍然无法实现点击某个按钮，使input自动获取焦点，在pc端可行</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;业务需求&quot;&gt;&lt;a href=&quot;#业务需求&quot; class=&quot;headerlink&quot; title=&quot;业务需求&quot;&gt;&lt;/a&gt;业务需求&lt;/h1&gt;&lt;p&gt;页面中存在输入框，点击输入框需要弹出数字键盘，且只能输入合法数字&lt;/p&gt;
&lt;h1 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解
      
    
    </summary>
    
      <category term="移动端开发" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="问题积累" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="input" scheme="http://yoursite.com/tags/input/"/>
    
      <category term="type=&quot;number&quot;" scheme="http://yoursite.com/tags/type-number/"/>
    
  </entry>
  
  <entry>
    <title>八种方法实现CSS页面底部固定</title>
    <link href="http://yoursite.com/2019/03/08/%E5%85%AB%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0CSS%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8%E5%9B%BA%E5%AE%9A.html"/>
    <id>http://yoursite.com/2019/03/08/八种方法实现CSS页面底部固定.html</id>
    <published>2019-03-08T06:42:59.000Z</published>
    <updated>2019-03-08T06:44:24.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="八种方法实现CSS页面底部固定"><a href="#八种方法实现CSS页面底部固定" class="headerlink" title="八种方法实现CSS页面底部固定"></a>八种方法实现CSS页面底部固定</h1><p>页面布局：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通用样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案：</p><ol><li><p>footer高度固定+绝对定位</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主体区域设置margin负值</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>header, footer设置margin负值</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#wrap</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过设置flex，将footer的margin-top设置为auto</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过calc()计算内容的高度</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="built_in">calc</span>(100vh - 150px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过设置flexbox，将主体main设置为flex</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用grid布局</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: auto <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">grid-row-start</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">grid-row-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>display: table</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-row;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;八种方法实现CSS页面底部固定&quot;&gt;&lt;a href=&quot;#八种方法实现CSS页面底部固定&quot; class=&quot;headerlink&quot; title=&quot;八种方法实现CSS页面底部固定&quot;&gt;&lt;/a&gt;八种方法实现CSS页面底部固定&lt;/h1&gt;&lt;p&gt;页面布局：&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CSS/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="底部固定" scheme="http://yoursite.com/tags/%E5%BA%95%E9%83%A8%E5%9B%BA%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>深入理解CSS：字体度量、line-height和vertical-align</title>
    <link href="http://yoursite.com/2019/03/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3CSS%EF%BC%9A%E5%AD%97%E4%BD%93%E5%BA%A6%E9%87%8F%E3%80%81line-height%E5%92%8Cvertical-align.html"/>
    <id>http://yoursite.com/2019/03/08/深入理解CSS：字体度量、line-height和vertical-align.html</id>
    <published>2019-03-08T06:42:32.000Z</published>
    <updated>2019-03-08T06:45:58.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>原文：</p><p><a href="http://link.zhihu.com/?target=http%3A//iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align" target="_blank" rel="noopener">Deep dive CSS: font metrics, line-height and vertical-align - Vincent De Oliveira</a></p><p>译文：</p><p><a href="https://zhuanlan.zhihu.com/p/25808995" target="_blank" rel="noopener">深入理解 CSS：字体度量、line-height 和 vertical-align</a></p><p><a href="https://juejin.im/entry/5acdc54c51882555867fc7fd" target="_blank" rel="noopener">深入研究CSS字体度量及CSS 盒子</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>line-height, vertical-align涉及到IFC(内联格式化上下文)</p><p>line-height取值可以为数字或px，数字表示相对于font-size的倍数，默认值为normal，normal取值为1-1.2之间</p><h3 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h3><p>不同字体，设置相同的font-size，其在页面上所占据的高度是不一样的，原因在于字体本身</p><p>字体的定义规则：</p><ul><li>字母的高度被称为“em”，在数字化字体中 em 是空间的数字化定义总量。em的大小（以下均写为: EM size）通常是 1000 单位，在 TrueType 字体中，EM size 约定是2的幂，通常是1024或2048。</li><li>根据其实际使用的单位，字体的度量可以根据一些设置来决定。注意，有些值是em-square之外的值。</li><li>在浏览器中，相对单位是用于缩放用来适应所需的 font-size</li></ul><p>字体的设置：</p><ul><li>一款字体会定义一个<a href="http://designwithfontforge.com/zh-CN/The_EM_Square.html" target="_blank" rel="noopener">em-square</a>：在字体设计中一个字符所在的空间容器（也被称作“EM size”或者“UPM”）），一般被设定为宽高均为1000的相对单位，也可是1024、2048相对单位</li><li><p>字体度量：</p><p><img src="/assets/css/1.png" width="800"></p><ul><li>baseline (基线): 分隔 ascent 和 descent ，默认字符底端沿 baseline 排列，如图中的P，x，Ё(为俄文字符)</li><li>ascent (上升): 基线的上部分，字符最高处与 ascent 顶端可能有空白，由 font-family 决定</li><li>descent (下降): 基线的下部分，字符最低处与 descent 底端可能有空白，由 font-family 决定</li><li>xHeight (X 字高): 小写字符 x 的高度，由 font-family 决定</li><li>capHeight (顶面高度): 大些字符 P 的高度，由 font-family 决定</li><li>lineSpacing (行间距): 在浏览器中一般 lineSpacing = ascent + descent</li><li>lineHeight （行高）: 默认等于 lineSpacing，受 line-height 设置影响，如果设置 line-height，lineHeight 等于 line-height。</li><li>half-leading (半行距): 如果lineHeight &gt; lineSpacing，则lineHeight 与 lineSpacing 之间会产生上下相等的空隙 (lineHeight - lineSpacing)    /2 称为半行距（half-leading或 half lead strips）。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h1&gt;&lt;p&gt;原文：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//iam
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="字体度量" scheme="http://yoursite.com/tags/%E5%AD%97%E4%BD%93%E5%BA%A6%E9%87%8F/"/>
    
      <category term="line-height" scheme="http://yoursite.com/tags/line-height/"/>
    
      <category term="vertical-align" scheme="http://yoursite.com/tags/vertical-align/"/>
    
  </entry>
  
  <entry>
    <title>Promise原理</title>
    <link href="http://yoursite.com/2019/03/08/Promise%E5%8E%9F%E7%90%86.html"/>
    <id>http://yoursite.com/2019/03/08/Promise原理.html</id>
    <published>2019-03-08T06:29:37.000Z</published>
    <updated>2019-03-08T06:39:14.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise-雏形"><a href="#Promise-雏形" class="headerlink" title="Promise 雏形"></a>Promise 雏形</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> callbackList = []</span><br><span class="line">    <span class="keyword">let</span> state = <span class="string">'pending'</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 这里的resolve是then函数新创建的promise对应的resolve函数，与当前promise中的resolve函数不是一个，运用了闭包原理</span></span><br><span class="line">            handler(&#123;</span><br><span class="line">                onFulfilled: onFulfilled || <span class="literal">null</span>,</span><br><span class="line">                resolve: resolve</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果处于未完成状态</span></span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">            callbackList.push(callback) <span class="comment">// 往当前callbackList队列push新promise对象</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 已成功状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果新的promise对象的onFulfilled为空，即调用then方法时没有正确传入函数，则直接调用promise的resolve函数，并传入then调用链中上一个promise resolve的值</span></span><br><span class="line">        <span class="keyword">if</span> (!callback.onFulfilled) &#123;</span><br><span class="line">            callback.resolve(value)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果新的promise对象的onFulfilled不为空，则调用then方法传入的回调函数，取得函数的返回值，调用promise的resolve函数，传入回调函数的返回值到调用链的下一个then方法中</span></span><br><span class="line">        <span class="keyword">const</span> ret = callback.onFulfilled(value)</span><br><span class="line">        callback.resolve(ret)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// then中return new Promise()执行拦截</span></span><br><span class="line">        <span class="keyword">if</span> (res &amp;&amp; (<span class="keyword">typeof</span> res === <span class="string">'object'</span> || <span class="keyword">typeof</span> res === <span class="string">'function'</span>)) &#123;</span><br><span class="line">            <span class="keyword">const</span> then = res.then</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123;</span><br><span class="line">                then.call(res, resolve)</span><br><span class="line">                <span class="comment">// res.then(resolve)</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            state = <span class="string">'fulfilled'</span></span><br><span class="line">            value = res</span><br><span class="line">            callbackList.forEach(<span class="function">(<span class="params">callback, callbackIndex</span>) =&gt;</span> &#123;</span><br><span class="line">                handler(callback)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn(resolve)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这里主要用两个 demo 来解释一下整个 promise 的执行过程</p><h3 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        resolve(<span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res)</span><br><span class="line">        &#125;, <span class="number">100</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>执行过程说明：</p><p>此处创建了三个 Promise 对象：一个是自己创建的，另外两个是 then 方法创建的</p><p>第一次事件循环</p><ol><li>执行 Promise 中的方法，把 setTimeout 的回调添加到下个事件循环的事件队列中，new 操作符隐式返回 this 对象（记为 promise1），promise1 的状态为 pending</li><li>执行 promise1 的 then 方法，创建 promise2，执行构造 promise2 传入的回调方法时，handler 函数执行的是 promise1 中的 handler 函数，判断 promise1 的状态，此时 promise1 的状态为 pending，把 promise2 push 到 promise1 的 callbackList 队列中，promise1 的 then 方法返回 promise2，promise2 的状态为 pending</li><li>执行 promise2 的 then 方法，创建 promise3，执行构造 promise3 传入的回调方法时，handler 函数执行的是 promise2 中的 handler 函数，判断 promise2 的状态，此时 promise2 的状态为 pending，把 promise3 push 到 promise2 的 callbackList 队列中，promise2 的 then 方法返回 promise3，promise3 的状态为 pending</li><li>截止到上诉步骤 3，此时 promise1 的 callbackList 中有 promise2，promise2 的 callbackList 中有 promise3，promise3 的 callbackList 为空</li></ol><p>第二次事件循环</p><ol start="5"><li>promise1 的异步方法执行完成，打印 1，往下个事件循环的时间队列中 push callbackList 执行方法</li></ol><p>第三次事件循环</p><ol start="6"><li>开始执行 promise1 的 callbackList，取出 promise2，执行 handler 函数，传入 promise2，此时 promise1 的状态不为 pending，promise2 的 onFulfilled 不为空，执行 onFulfilled 方法，传入 promise1 的 value 值 2，往下个事件循环队列插入回调函数 res=&gt;{setTimeout(()=&gt;{console.log(res)},100)}，返回 undefined，调用 promise2 的 resolve 方法</li><li>往下个事件循环的时间队列中 push promise2 的 callbackList 执行方法</li></ol><p>第四次事件循环</p><ol start="8"><li>因为步骤 6 往事件循环中 push 的函数，还没有到执行时机（设置了 100ms，如果设置为 0 会先执行这个），于是执行队列中的下个函数，也就是 promise2 的 callbackList</li><li>promise2 的状态变为 fulfilled，取出 promise2 callbackList 中的 promise3，此时 promise2 的状态不为 pending，promise3 的 onFulfilled 不为空，执行 onFulfilled 方法，传入 promise2 的返回值 undefine，输出 undefined</li></ol><p>在某一事件循环时</p><ol start="10"><li>100ms 到达，执行步骤 6 的事件，输出 2</li></ol><p>所以输出顺序是 1 undefined 2</p><h3 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        resolve(<span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;, <span class="number">100</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>执行过程说明：</p><p>1-5. 对应上述 1-5</p><ol start="6"><li>执行 promise2 的 onFulFilled 时，创建了一个中间 promise（mid promise），构造回调传入的参数是 promise2 的 value 值，同样往下个事件循环的事件队列中 push 了 setTimeout 方法，延迟 100ms，但是这时不是返回 undefined，返回的是 mid promise，调用 promise2 的 resolve 方法传入的是 mid promise，命中了 resolve 中的 promise 判断</li><li>promise2 resolve 方法中的 pomise 判断命中，并没有往下个事件循环队列中 push promise2 的 callbackList 执行回调，反而调用了 mid promise 的 then 方法，把 promise2 的 resolve 方法作为回调传入</li><li>mid promise 的 then 方法执行，创建 promise4，promise4 被 push 到 mid promise 的 callbackList 中，等待 mid promise 被 resolve</li></ol><p>在某一事件循环时，假定为 n</p><ol start="9"><li>100ms 到达，setTimeout 执行，输出 promise2 的 value 值 2，mid promise 被 resolve，mid promise callbackList 被添加到下一个事件循环执行</li></ol><p>n+1 次事件循环</p><ol start="10"><li>mid promise 的 callbackList 中的 promise4 被拿出来执行，而此时的 promise4 的 fulFilled 方法，其实就是 promise2 的 resolve 方法，于是执行 promise2 的 resolve 方法，往下个事件循环的事件队列中 push promise2 的 callbackList 执行回调</li></ol><p>n+2 次事件循环</p><ol start="11"><li>对应上述 9</li></ol><p>所以输出顺序为 1 2 undefined</p><h2 id="与原Pomise的不一致行为"><a href="#与原Pomise的不一致行为" class="headerlink" title="与原Pomise的不一致行为"></a>与原Pomise的不一致行为</h2><ol><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        resolve(<span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Promise-雏形&quot;&gt;&lt;a href=&quot;#Promise-雏形&quot; class=&quot;headerlink&quot; title=&quot;Promise 雏形&quot;&gt;&lt;/a&gt;Promise 雏形&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="promise" scheme="http://yoursite.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>JS之引擎</title>
    <link href="http://yoursite.com/2019/03/08/JS%E4%B9%8B%E5%BC%95%E6%93%8E.html"/>
    <id>http://yoursite.com/2019/03/08/JS之引擎.html</id>
    <published>2019-03-08T06:28:57.000Z</published>
    <updated>2019-03-08T06:37:05.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS引擎之Shapes-amp-Inline-Caches"><a href="#JS引擎之Shapes-amp-Inline-Caches" class="headerlink" title="JS引擎之Shapes&amp;Inline Caches"></a>JS引擎之Shapes&amp;Inline Caches</h1><p><a href="https://mathiasbynens.be/notes/shapes-ics" target="_blank" rel="noopener">原文链接</a><br><a href="https://hijiangtao.github.io/2018/06/17/Shapes-ICs/" target="_blank" rel="noopener">译文链接</a></p><h1 id="JS引擎之V8如何优化prototype"><a href="#JS引擎之V8如何优化prototype" class="headerlink" title="JS引擎之V8如何优化prototype"></a>JS引擎之V8如何优化prototype</h1><p><a href="https://mathiasbynens.be/notes/prototypes" target="_blank" rel="noopener">原文链接</a><br><a href="https://hijiangtao.github.io/2018/08/21/Prototypes/" target="_blank" rel="noopener">译文链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS引擎之Shapes-amp-Inline-Caches&quot;&gt;&lt;a href=&quot;#JS引擎之Shapes-amp-Inline-Caches&quot; class=&quot;headerlink&quot; title=&quot;JS引擎之Shapes&amp;amp;Inline Caches&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="引擎" scheme="http://yoursite.com/tags/%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>JS之类型转换</title>
    <link href="http://yoursite.com/2019/03/08/JS%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html"/>
    <id>http://yoursite.com/2019/03/08/JS之类型转换.html</id>
    <published>2019-03-08T06:27:50.000Z</published>
    <updated>2019-03-08T06:33:29.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS之类型转换"><a href="#JS之类型转换" class="headerlink" title="JS之类型转换"></a>JS之类型转换</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://mp.weixin.qq.com/s/wd8JLGtnsoQYfm3K7KXO0g" target="_blank" rel="noopener">JavaScript核心概念：类型转换</a></p><p><img width="500" src="/assets/js/2.webp"></p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table" target="_blank" rel="noopener">运算符优先级表</a></p><h2 id="运算符的隐式转换原则"><a href="#运算符的隐式转换原则" class="headerlink" title="==运算符的隐式转换原则"></a>==运算符的隐式转换原则</h2><p><a href="https://tc39.github.io/ecma262/#sec-abstract-equality-comparison" target="_blank" rel="noopener">ECMAScript® 2019 : 7.2.14 Abstract Equality Comparison</a></p><p>规范描述：The comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows:</p><ol><li>If Type(x) is the same as Type(y)<ul><li>then Return the result of performing Strict Equality Comparison x === y.</li></ul></li><li>If x is null and y is undefined, return true.</li><li>If x is undefined and y is null, return true.</li><li>If Type(x) is Number and Type(y) is String, return the result of the comparison x == ! ToNumber(y).</li><li>If Type(x) is String and Type(y) is Number, return the result of the comparison ! ToNumber(x) == y.</li><li>If Type(x) is Boolean, return the result of the comparison ! ToNumber(x) == y.</li><li>If Type(y) is Boolean, return the result of the comparison x == ! ToNumber(y).</li><li>If Type(x) is either String, Number, or Symbol and Type(y) is Object, return the result of the comparison x == ToPrimitive(y).</li><li>If Type(x) is Object and Type(y) is either String, Number, or Symbol, return the result of the comparison ToPrimitive(x) == y.</li><li>Return false.</li></ol><h3 id="ToNumber"><a href="#ToNumber" class="headerlink" title="ToNumber"></a>ToNumber</h3><p><a href="https://tc39.github.io/ecma262/#sec-tonumber" target="_blank" rel="noopener">ECMAScript® 2019 : 7.1.3ToNumber</a></p><p><img width="500" src="/assets/js/1.png"></p><h3 id="ToPrimitive"><a href="#ToPrimitive" class="headerlink" title="ToPrimitive"></a>ToPrimitive</h3><p><a href="https://tc39.github.io/ecma262/#sec-toprimitive" target="_blank" rel="noopener">ECMAScript® 2019 : 7.1.1ToPrimitive ( input [ , PreferredType ] )</a></p><p>The abstract operation ToPrimitive takes an input argument and an optional argument PreferredType. The abstract operation ToPrimitive converts its input argument to a non-Object type[尝试转换为原始对象]. If an object is capable of converting to more than one primitive type, it may use the optional hint PreferredType to favour that type. Conversion occurs according to the following algorithm[如果对象能够转换为多个基本类型，则可以使用可选提示PreferredType来支持该类型。根据以下算法进行转换]:</p><ol><li>Assert: input is an ECMAScript language value.</li><li>If Type(input) is Object, then<ol><li>If PreferredType is not present, let hint be “default”.</li><li>Else if PreferredType is hint String, let hint be “string”.</li><li>Else PreferredType is hint Number, let hint be “number”.</li><li>Let exoticToPrim be ? GetMethod(input, @@toPrimitive).</li><li>If exoticToPrim is not undefined, then<ol><li>Let result be ? Call(exoticToPrim, input, « hint »).</li><li>If Type(result) is not Object, return result.</li><li>Throw a TypeError exception.</li></ol></li><li>If hint is “default”, set hint to “number”.</li><li>Return ? OrdinaryToPrimitive(input, hint).</li></ol></li><li>Return input.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Assert: input is an ECMAScript language value.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToPrimitive</span> (<span class="params">input, PreferredType</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> input === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> hint = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">typeof</span> PreferredType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'undefined'</span>:</span><br><span class="line">                hint = <span class="string">'default'</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">                hint = <span class="string">'string'</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                hint = <span class="string">'number'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> exoticToPrim = GetMethod(input, @@toPrimitive)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exoticToPrim !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> result = Call(exoticToPrim, input, &lt;&lt; hint &gt;&gt;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> result !== <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">TypeError</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hint === <span class="string">'default'</span>) &#123;</span><br><span class="line">            hint = <span class="string">'number'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> OrdinaryToPrimitive(input, hint)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GetMethod"><a href="#GetMethod" class="headerlink" title="GetMethod"></a>GetMethod</h3><p><a href="https://tc39.github.io/ecma262/#sec-getmethod" target="_blank" rel="noopener">ECMAScript® 2019 : 7.3.9GetMethod ( V, P )</a></p><p>The abstract operation GetMethod is used to get the value of a specific property of an ECMAScript language value when the value of the property is expected to be a function. The operation is called with arguments V and P where V is the ECMAScript language value, P is the property key. This abstract operation performs the following steps:</p><ol><li>Assert: IsPropertyKey(P) is true.</li><li>Let func be ? GetV(V, P).</li><li>If func is either undefined or null, return undefined.</li><li>If IsCallable(func) is false, throw a TypeError exception.</li><li>Return func.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Assert: IsPropertyKey(P) is true.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetMethod</span> (<span class="params">V, P</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> func = GetV(V, P)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (func === <span class="literal">undefined</span> || func === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!IsCallable(func)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TypeError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IsPropertyKey"><a href="#IsPropertyKey" class="headerlink" title="IsPropertyKey"></a>IsPropertyKey</h3><p><a href="https://tc39.github.io/ecma262/#sec-ispropertykey" target="_blank" rel="noopener">ECMAScript® 2019 : 7.2.7IsPropertyKey ( argument )</a></p><p>The abstract operation IsPropertyKey determines if argument, which must be an ECMAScript language value, is a value that may be used as a property key.</p><ol><li>If Type(argument) is String, return true.</li><li>If Type(argument) is Symbol, return true.</li><li>Return false.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPropertyKey</span> (<span class="params">argument</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> argument) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'symbol'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GetV"><a href="#GetV" class="headerlink" title="GetV"></a>GetV</h3><p><a href="https://tc39.github.io/ecma262/#sec-getv" target="_blank" rel="noopener">ECMAScript® 2019 : 7.3.2GetV ( V, P )</a></p><p>The abstract operation GetV is used to retrieve the value of a specific property of an ECMAScript language value. If the value is not an object, the property lookup is performed using a wrapper object appropriate for the type of the value. The operation is called with arguments V and P where V is the value and P is the property key. This abstract operation performs the following steps:</p><ol><li>Assert: IsPropertyKey(P) is true.</li><li>Let O be ? ToObject(V).</li><li>Return ? O.<a href="P, V">[Get]</a>.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Assert: IsPropertyKey(P) is true.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetV</span> (<span class="params">V, P</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> O = ToObject(V)</span><br><span class="line">    <span class="keyword">return</span> O.[[Get]](P, V)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ToObject"><a href="#ToObject" class="headerlink" title="ToObject"></a>ToObject</h3><p><a href="https://tc39.github.io/ecma262/#sec-toobject" target="_blank" rel="noopener">ECMAScript® 2019 : 7.1.13ToObject ( argument )</a></p><p>The abstract operation ToObject converts argument to a value of type Object according to below Table:</p><table><thead><tr><th>Argument Type</th><th>Result</th></tr></thead><tbody><tr><td>Undefined</td><td>Throw a TypeError exception.</td></tr><tr><td>Null</td><td>Throw a TypeError exception.</td></tr><tr><td>Boolean</td><td>Return a new Boolean object whose [[BooleanData]] internal slot is set to argument.</td></tr><tr><td>Number</td><td>Return a new Number object whose [[NumberData]] internal slot is set to argument.</td></tr><tr><td>String</td><td>Return a new String object whose [[StringData]] internal slot is set to argument.</td></tr><tr><td>Symbol</td><td>Return a new Symbol object whose [[SymbolData]] internal slot is set to argument.</td></tr><tr><td>Object</td><td>Return argument.</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToObject</span> (<span class="params">argument</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argument === <span class="literal">undefined</span> || argument === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TypeError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> argument) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'boolean'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Boolean</span>(argument)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Number</span>(argument)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">String</span>(argument)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span>: <span class="string">'symbol'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Symbol</span>(argument)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> argument</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IsCallable"><a href="#IsCallable" class="headerlink" title="IsCallable"></a>IsCallable</h3><p><a href="https://tc39.github.io/ecma262/#sec-iscallable" target="_blank" rel="noopener">ECMAScript® 2019 : 7.2.3IsCallable ( argument )</a></p><p>The abstract operation IsCallable determines if argument, which must be an ECMAScript language value, is a callable function with a [[Call]] internal method.</p><ol><li>If Type(argument) is not Object, return false.</li><li>If argument has a [[Call]] internal method, return true.</li><li>Return false.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsCallable</span> (<span class="params">argument</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> argument !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> argument.__proto__.call === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h3><p><a href="https://tc39.github.io/ecma262/#sec-call" target="_blank" rel="noopener">ECMAScript® 2019 : 7.3.12Call ( F, V [ , argumentsList ] )</a></p><p>The abstract operation Call is used to call the [[Call]] internal method of a function object. The operation is called with arguments F, V, and optionally argumentsList where F is the function object, V is an ECMAScript language value that is the this value of the [[Call]], and argumentsList is the value passed to the corresponding argument of the internal method. If argumentsList is not present, a new empty List is used as its value. This abstract operation performs the following steps:</p><ol><li>If argumentsList is not present, set argumentsList to a new empty List.</li><li>If IsCallable(F) is false, throw a TypeError exception.</li><li>Return ? F.<a href="V, argumentsList">[Call]</a>.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Call</span> (<span class="params">F, V, ...argumentsList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!argumentsList) &#123;</span><br><span class="line">        argumentsList = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (IsCallable(F)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TypeError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> F.call(V, argumentsList)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OrdinaryToPrimitive"><a href="#OrdinaryToPrimitive" class="headerlink" title="OrdinaryToPrimitive"></a>OrdinaryToPrimitive</h3><p><a href="https://tc39.github.io/ecma262/#sec-ordinarytoprimitive" target="_blank" rel="noopener">ECMAScript® 2019 : 7.1.1.1OrdinaryToPrimitive ( O, hint )</a></p><p>When the abstract operation OrdinaryToPrimitive is called with arguments O and hint, the following steps are taken:</p><ol><li>Assert: Type(O) is Object.</li><li>Assert: Type(hint) is String and its value is either “string” or “number”.</li><li>If hint is “string”, then</li><li>Let methodNames be « “toString”, “valueOf” ».</li><li>Else,</li><li>Let methodNames be « “valueOf”, “toString” ».</li><li>For each name in methodNames in List order, do</li><li>Let method be ? Get(O, name).</li><li>If IsCallable(method) is true, then</li><li>Let result be ? Call(method, O).</li><li>If Type(result) is not Object, return result.</li><li>Throw a TypeError exception.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Assert: Type(O) is Object</span></span><br><span class="line"><span class="comment">// Assert: Type(hint) is String and its value is either "string" or "number"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OrdinaryToPrimitive</span> (<span class="params">O, hint</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> methodNames = [<span class="string">'valueOf'</span>, <span class="string">'toString'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> hint === <span class="string">'string'</span>) &#123;</span><br><span class="line">        methodNames = [<span class="string">'toString'</span>, <span class="string">'valueOf'</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    methodNames.forEach(<span class="function">(<span class="params">name, nameIndex</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> method = Get(O, name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsCallable(method)) &#123;</span><br><span class="line">            <span class="keyword">let</span> result = Call(method, O)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> result !== <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">TypeError</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><p><a href="https://tc39.github.io/ecma262/#sec-get-o-p" target="_blank" rel="noopener">ECMAScript® 2019 : 7.3.1Get ( O, P )</a></p><p>The abstract operation Get is used to retrieve the value of a specific property of an object. The operation is called with arguments O and P where O is the object and P is the property key. This abstract operation performs the following steps:</p><ol><li>Assert: Type(O) is Object.</li><li>Assert: IsPropertyKey(P) is true.</li><li>Return ? O.<a href="P, O">[Get]</a>.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Assert: Type(O) is Object.</span></span><br><span class="line"><span class="comment">// Assert: IsPropertyKey(P) is true.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get</span> (<span class="params">O, P</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> O.[[Get]](P, O)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get-1"><a href="#Get-1" class="headerlink" title="[[Get]]"></a>[[Get]]</h3><p>[ECMAScript® 2019 : 9.1.8<a href="https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver" target="_blank" rel="noopener">[Get]] ( P, Receiver )</a></p><p>When the [[Get]] internal method of O is called with property key P and ECMAScript language value Receiver, the following steps are taken:</p><ol><li>Return ? OrdinaryGet(O, P, Receiver).</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function [[Get]] (P, Receiver) &#123;</span><br><span class="line">    <span class="keyword">return</span>  OrdinaryGet(O, P, Receiver)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OrdinaryGet"><a href="#OrdinaryGet" class="headerlink" title="OrdinaryGet"></a>OrdinaryGet</h3><p><a href="https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver" target="_blank" rel="noopener">ECMAScript® 2019 : 9.1.8.1OrdinaryGet ( O, P, Receiver ))</a></p><p>When the abstract operation OrdinaryGet is called with Object O, property key P, and ECMAScript language value Receiver, the following steps are taken:</p><ol><li>Assert: IsPropertyKey(P) is true.</li><li>Let desc be ? O.<a href="P">[GetOwnProperty]</a>.</li><li>If desc is undefined, then.<ul><li>Let parent be ? O.<a href="">[GetPrototypeOf]</a>.</li><li>If parent is null, return undefined.</li><li>Return ? parent.<a href="P, Receiver">[Get]</a>.</li></ul></li><li>If IsDataDescriptor(desc) is true, return desc.[[Value]].</li><li>Assert: IsAccessorDescriptor(desc) is true.</li><li>Let getter be desc.[[Get]].</li><li>If getter is undefined, return undefined.</li><li>Return ? Call(getter, Receiver).</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS之类型转换&quot;&gt;&lt;a href=&quot;#JS之类型转换&quot; class=&quot;headerlink&quot; title=&quot;JS之类型转换&quot;&gt;&lt;/a&gt;JS之类型转换&lt;/h1&gt;&lt;h2 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JavaScript/"/>
    
    
      <category term="javascript，类型转换" scheme="http://yoursite.com/tags/javascript%EF%BC%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="http://yoursite.com/2019/03/08/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.html"/>
    <id>http://yoursite.com/2019/03/08/冒泡排序.html</id>
    <published>2019-03-08T06:23:21.000Z</published>
    <updated>2019-03-08T06:25:23.658Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">冒泡排序</span></span><br><span class="line"><span class="comment">时间复杂度：O(n2)</span></span><br><span class="line"><span class="comment">算法介绍：https://blog.csdn.net/shuaizai88/article/details/73250615</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">let</span> tempNum = arr[j]</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">                arr[j - <span class="number">1</span>] = tempNum</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line">bubbleSort(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法，排序" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>选择排序</title>
    <link href="http://yoursite.com/2019/03/08/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.html"/>
    <id>http://yoursite.com/2019/03/08/选择排序.html</id>
    <published>2019-03-08T06:23:21.000Z</published>
    <updated>2019-03-08T06:26:22.696Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">选择排序</span></span><br><span class="line"><span class="comment">时间复杂度：O(n2)</span></span><br><span class="line"><span class="comment">算法介绍：https://www.cnblogs.com/shen-hua/p/5424059.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'param type is not array!'</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> minNumIndex = i</span><br><span class="line">        <span class="keyword">let</span> tempNum = arr[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minNumIndex]) &#123;</span><br><span class="line">                minNumIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[i] = arr[minNumIndex]</span><br><span class="line">        arr[minNumIndex] = tempNum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line">selectionSort(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法，排序" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="http://yoursite.com/2019/03/08/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html"/>
    <id>http://yoursite.com/2019/03/08/插入排序.html</id>
    <published>2019-03-08T06:23:21.000Z</published>
    <updated>2019-03-08T06:25:41.854Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">插入排序</span></span><br><span class="line"><span class="comment">时间复杂度：最好：O(n) 最坏O(n2)</span></span><br><span class="line"><span class="comment">算法介绍：https://www.cnblogs.com/hapjin/p/5517667.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> arrLen = arr.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> tempNum = arr[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                arr.splice(i, <span class="number">1</span>)</span><br><span class="line">                arr.splice(j, <span class="number">0</span>, tempNum)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line">insertSort(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法，排序" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://yoursite.com/2019/03/08/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.html"/>
    <id>http://yoursite.com/2019/03/08/快速排序.html</id>
    <published>2019-03-08T06:23:21.000Z</published>
    <updated>2019-03-08T06:26:06.601Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">快速排序</span></span><br><span class="line"><span class="comment">时间复杂度：O(N*logN)</span></span><br><span class="line"><span class="comment">算法介绍：http://developer.51cto.com/art/201403/430986.htm</span></span><br><span class="line"><span class="comment">疑问点：</span></span><br><span class="line"><span class="comment">基数在左边，为什么要从右边先开始查找？</span></span><br><span class="line"><span class="comment">答：从代码层面分析，因为最后找到的一个数也就是小标为i的数需要与基数对换，而基数在最左边，说明最后一个数会放到最左边，也就是最后一个数必须必基数小，而从右边开始查找的是必基数小的数，终止</span></span><br><span class="line"><span class="comment">查找的可能性：</span></span><br><span class="line"><span class="comment">从右侧开始查找终止查找的可能性：</span></span><br><span class="line"><span class="comment">1. 前一次对调结束，j找到i所在位置，此时i是比基数小的，i下标对应的数与基数对换没有问题</span></span><br><span class="line"><span class="comment">2. 前一次对调结束，j找到最后一个数，这个数比基数小，j停止，i开始查找比基数大的数，走到j的位置，i不小于j，停止，i下标对应的数与基数对换没有问题</span></span><br><span class="line"><span class="comment">从左侧开始查找终止查找的可能性：</span></span><br><span class="line"><span class="comment">1. 前一次对调结束，i找到j所在位置，此时i是比基数大的，i下标对应的数与基数对换出错</span></span><br><span class="line"><span class="comment">2. 前一次对调结束，i找到最后一个数，这个数比基数大，i停止，j开始查找比基数小的数，走到i的位置，i不小于j，停止，i下标对应的数与基数对换出错</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span> (<span class="params">_left, _right, _arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(_arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_left &gt;= _right) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> baseNum = _arr[_left]</span><br><span class="line">    <span class="keyword">let</span> i = _left</span><br><span class="line">    <span class="keyword">let</span> j = _right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i !== j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (_arr[j] &gt;= baseNum &amp;&amp; i &lt; j) &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (_arr[i] &lt;= baseNum &amp;&amp; i &lt; j) &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">let</span> tempNum = _arr[i]</span><br><span class="line">            _arr[i] = _arr[j]</span><br><span class="line">            _arr[j] = tempNum</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _arr[_left] = _arr[i]</span><br><span class="line">    _arr[i] = baseNum </span><br><span class="line">    <span class="built_in">console</span>.log(_arr)</span><br><span class="line">    quickSort(_left, i - <span class="number">1</span>, _arr)</span><br><span class="line">    quickSort(i + <span class="number">1</span>, _right, _arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment">// let arr = [5, 80, 55, 40, 42, 85]</span></span><br><span class="line">quickSort(<span class="number">0</span>, arr.length - <span class="number">1</span>, arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法，排序" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>VueRouter之打开新的标签页</title>
    <link href="http://yoursite.com/2019/03/08/VueRouter%E4%B9%8B%E6%89%93%E5%BC%80%E6%96%B0%E7%9A%84%E6%A0%87%E7%AD%BE%E9%A1%B5.html"/>
    <id>http://yoursite.com/2019/03/08/VueRouter之打开新的标签页.html</id>
    <published>2019-03-08T06:20:37.000Z</published>
    <updated>2019-03-08T06:21:24.623Z</updated>
    
    <content type="html"><![CDATA[<ol><li>router-link添加target=”_blank”属性</li><li>window.open</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; href &#125; = <span class="keyword">this</span>.$router.resolve(location, current ?, append ?) <span class="comment">// 解析目标位置</span></span><br><span class="line"><span class="built_in">window</span>.open(href, <span class="string">'_blank'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;router-link添加target=”_blank”属性&lt;/li&gt;
&lt;li&gt;window.open&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Vue/"/>
    
      <category term="问题积累" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Vue/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
      <category term="window.open" scheme="http://yoursite.com/tags/window-open/"/>
    
  </entry>
  
  <entry>
    <title>Vue之清空表单</title>
    <link href="http://yoursite.com/2019/03/08/Vue%E4%B9%8B%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%8D%95.html"/>
    <id>http://yoursite.com/2019/03/08/Vue之清空表单.html</id>
    <published>2019-03-08T06:16:02.000Z</published>
    <updated>2019-03-08T06:17:56.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单的的表单"><a href="#简单的的表单" class="headerlink" title="简单的的表单"></a>简单的的表单</h1><p>如果所有表单控件都处于当前页面，不包含组件，且都是双向绑定的数据，则清空值就行了</p><h1 id="复杂的表单"><a href="#复杂的表单" class="headerlink" title="复杂的表单"></a>复杂的表单</h1><p>如果表单包含组件级别的控件，层级较深，可以使用一种hack的手段，通过v-if重新渲染组件，清空组件内input里的值，选中的复选框等等，同时将页面内的相关数据清空就行了，如图所示：</p><p><image width="500" src="/assets/vue/problems/17.png"></image></p><image width="500" src="/assets/vue/problems/18.png"></image>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单的的表单&quot;&gt;&lt;a href=&quot;#简单的的表单&quot; class=&quot;headerlink&quot; title=&quot;简单的的表单&quot;&gt;&lt;/a&gt;简单的的表单&lt;/h1&gt;&lt;p&gt;如果所有表单控件都处于当前页面，不包含组件，且都是双向绑定的数据，则清空值就行了&lt;/p&gt;
&lt;h1 id=&quot;复
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Vue/"/>
    
      <category term="问题积累" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Vue/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="form" scheme="http://yoursite.com/tags/form/"/>
    
  </entry>
  
  <entry>
    <title>Vue之改变路由页面回到顶部</title>
    <link href="http://yoursite.com/2019/03/08/Vue%E4%B9%8B%E6%94%B9%E5%8F%98%E8%B7%AF%E7%94%B1%E9%A1%B5%E9%9D%A2%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8.html"/>
    <id>http://yoursite.com/2019/03/08/Vue之改变路由页面回到顶部.html</id>
    <published>2019-03-08T06:11:30.000Z</published>
    <updated>2019-03-08T06:15:11.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>vue是单页应用，通过改变hash值来实现不同页面之前的跳转，当一个页面滚动到底部时，然后跳转到另一个也面，同样会在页面底部，并不会回到顶部</p><h1 id="vue-router-scrollBehavior"><a href="#vue-router-scrollBehavior" class="headerlink" title="vue-router scrollBehavior"></a>vue-router scrollBehavior</h1><p>当创建一个router实例时，可以提供一个scrollBehavior方法控制路由跳转时页面滚动条的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [...],</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="comment">// return 期望滚动到哪个的位置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>具体的使用方法点<a href="https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html#%E5%BC%82%E6%AD%A5%E6%BB%9A%E5%8A%A8" target="_blank" rel="noopener">这里</a>，但是该方法只在支持history.pushState的浏览器中可用，移动端不存在问题，pc端IE10+以上，因此对pc端的解决方法进行了探索</p><h1 id="vue-router-beforeEach-amp-afterEach中回到顶部操作存在的问题"><a href="#vue-router-beforeEach-amp-afterEach中回到顶部操作存在的问题" class="headerlink" title="vue-router beforeEach&amp;afterEach中回到顶部操作存在的问题"></a>vue-router beforeEach&amp;afterEach中回到顶部操作存在的问题</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上方法在跳转页面时页面会闪烁一下，原因是因为dom的更新操作在触发afterEach的回调函数之后进行，也就是所触发afterEach函数的时候，页面的dom其实还是旧的页面的dom，所以当设置滚动条的位置时，会在旧页面先回到顶部，再更新成新页面的dom，下面是vue-router完整的导航解析流程：</p><p><img width="500" src="/assets/vue/problems/16.png"></p><h1 id="利用定时器"><a href="#利用定时器" class="headerlink" title="利用定时器"></a>利用定时器</h1><p>利用定时器将更改滚动条位置的操作放入到macrotasks事件队列末尾，即在更新dom操作之后就可以解决页面闪烁的问题了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>还有一个问题是，当刷新当前页面的时候，浏览器会记录当前页面滚动条，并在刷新页面后将滚动条的位置恢复到刷新页面之前，测试了两种浏览器，表现不一致：</p><ol><li>chrome：先回到页面顶部-&gt;再回到刷新之前位置，导致页面闪烁</li><li>firefox：回到页面顶部</li></ol><p>为了解决上述问题，需要对刷新页面的时候进行额外处理，不回到页面顶部，可以根据afterEach回调函数的from参数来判断，当刷新页面或第一次进入页面时，from.name为null：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">from</span>.name &amp;&amp; setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;vue是单页应用，通过改变hash值来实现不同页面之前的跳转，当一个页面滚动到底部时，然后跳转到另一个也面，同样会在页面底部
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Vue/"/>
    
      <category term="问题积累" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Vue/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>video标签使用v-show播放失败</title>
    <link href="http://yoursite.com/2019/03/08/video%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8v-show%E6%92%AD%E6%94%BE%E5%A4%B1%E8%B4%A5.html"/>
    <id>http://yoursite.com/2019/03/08/video标签使用v-show播放失败.html</id>
    <published>2019-03-08T06:06:52.000Z</published>
    <updated>2019-03-08T06:10:20.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="video-source-src-异步赋值播放失败"><a href="#video-source-src-异步赋值播放失败" class="headerlink" title="video source src 异步赋值播放失败"></a>video source src 异步赋值播放失败</h1><p>如图所示，v-show控制video标签是否显示，showVideo初始值为false，模拟接口异步返回视频链接，然后改变视频的src，但此时视频没有成功播放，Network中也没有去加载对应的视频资源</p><p><img width="500px" src="/assets/vue/problems/10.png"><br><img width="500px" src="/assets/vue/problems/11.png"></p><h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><p>大家都知道v-show控制的css的visibility属性，实际上无论v-show的值是true或者false都会去渲染dom，可见，视频播放失败跟v-show并没有多大的关系，于是我们把v-show去了验证一下：</p><p><img width="500px" src="/assets/vue/problems/12.png"></p><p>同样，视频也播放失败，并且Network中也没有视频资源的加载记录，由此可推断，当video中存在source标签的时候，浏览器渲染之后会自动去加载src对应的资源，后续即便地址改变，浏览器也不会再去获取资源</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li><p>src属性添加到video标签上</p><p> <img width="500px" src="/assets/vue/problems/15.png"></p></li><li><p>使用v-if替代v-show，触发dom重排</p><p> <img width="500px" src="/assets/vue/problems/13.png"></p></li><li><p>触发video的load方法</p><p> <img width="500px" src="/assets/vue/problems/14.png"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;video-source-src-异步赋值播放失败&quot;&gt;&lt;a href=&quot;#video-source-src-异步赋值播放失败&quot; class=&quot;headerlink&quot; title=&quot;video source src 异步赋值播放失败&quot;&gt;&lt;/a&gt;video sourc
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Vue/"/>
    
      <category term="问题积累" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Vue/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="video" scheme="http://yoursite.com/tags/video/"/>
    
      <category term="v-show" scheme="http://yoursite.com/tags/v-show/"/>
    
  </entry>
  
  <entry>
    <title>Vue之Dom复用</title>
    <link href="http://yoursite.com/2019/03/08/Vue%E4%B9%8BDom%E5%A4%8D%E7%94%A8.html"/>
    <id>http://yoursite.com/2019/03/08/Vue之Dom复用.html</id>
    <published>2019-03-08T05:53:19.000Z</published>
    <updated>2019-03-08T06:08:24.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img width="500" height="500" src="/assets/vue/problems/5.png"><img width="500" height="500" src="/assets/vue/problems/8.png"></p><p><img src="/assets/vue/problems/1.png"></p><p>如上图所示，页面中通过遍历数组循环出n个组件，并传入msg值在组件中显示，点击删除按钮时，触发父组件的方法，删除该组件，在页面中我们进行如下操作：</p><ol><li><p>在3个输入框中依次输入1，2，3</p><p> <img src="/assets/vue/problems/2.png"></p></li><li><p>点击第二个删除按钮</p><p> <img src="/assets/vue/problems/3.png"></p></li><li><p>成功删除组件，但最终效果并不是我们所期望的下图中的样子</p><p> <img src="/assets/vue/problems/9.png"></p></li></ol><h1 id="Why-？"><a href="#Why-？" class="headerlink" title="Why ？"></a>Why ？</h1><p>Vue组件复用问题，这个问题涉及到Vue的diff算法，这里只做简单概述，如果想要详细了解，请参考文档<a href="">Vue diff算法原理</a>，Vue为了使得更新dom时更加的有效率，在更新数据后，重新渲染dom时，会对比同层dom节点的类型（标签类型或自定义组件类型）是否相同，如果相同，则直接复用之前的组件，只进行数据的更新，放到这个例子里，说白了，当前剩下的两个输入框组件其实是之前3个中的前2个，因为msg是通过prop传入到子组件的，所以当改变arr数组时，触发dom更新，虽然复用了之前的2个组件，但传入的prop是会改变的，但因为input框是存在于子组件本身，并没有依赖父元素的值，所以input框里的值是不会变的</p><h1 id="key-”index”存在的问题"><a href="#key-”index”存在的问题" class="headerlink" title=":key=”index”存在的问题"></a>:key=”index”存在的问题</h1><p>很多人为了规避编辑器的错误提示，会在循环时加上:key=”index”，这并没有改变vue的diff算法，与没加的效果是一样的，所有组件内的值都需要重新渲染一次：</p><p><img width="500" height="500" src="/assets/vue/problems/6.png"><img width="500" height="500" src="/assets/vue/problems/4.png"></p><p>如上图所示，第一次遍历arr时，arr中的3个值1,2,3对应的arrIndex的分别是0，1，2，当删除第二个组件时，arr为[1,3]，重新遍历渲染时，1，3对应的arrIndex分别为0，1，相当于复用了之前arrIndex为0，1的两个组件，也就是跟没加:key=”index”所产生的效果是相同的，这就是为什么加了:key=”arrIndex”还是无法达到我们所期望的效果</p><h1 id="key-”唯一id”"><a href="#key-”唯一id”" class="headerlink" title=":key=”唯一id”"></a>:key=”唯一id”</h1><p>这种情况下，可以给arr中的每一项生成一个不可变的唯一id，则删除时，就能根据唯一id去准确的找到其之前所对应的dom了，达到准确复用</p><p><img width="500" height="500" src="/assets/vue/problems/7.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img width=&quot;500&quot; height=&quot;500&quot; src=&quot;/assets/vue/problems/5.png&quot;
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Vue/"/>
    
      <category term="问题积累" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Vue/%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
</feed>
